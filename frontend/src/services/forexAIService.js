// ForexAI Services - Ready for Perplexity AI and FRED Integration
import { API_CONFIG, apiHelpers } from './apiConfig';

class ForexAIService {
  constructor() {
    this.perplexityApiKey = process.env.REACT_APP_PERPLEXITY_API_KEY;
    this.fredApiKey = process.env.REACT_APP_FRED_API_KEY;
    this.isInitialized = true;
    
    if (this.perplexityApiKey && this.perplexityApiKey !== 'placeholder_for_perplexity_key') {
      console.log('ü§ñ ForexAI Service initialized with Perplexity AI');
    }
  }

  // Check if service is ready
  isReady() {
    return this.perplexityApiKey && this.perplexityApiKey !== 'placeholder_for_perplexity_key';
  }

  // Check if FRED is ready
  isFredReady() {
    return this.fredApiKey && this.fredApiKey !== 'placeholder_for_fred_key';
  }

  // Generate Daily Market Recap using Perplexity AI
  async generateDailyRecap() {
    if (!this.isReady()) {
      console.log('‚ö†Ô∏è Perplexity API not ready, using mock data');
      return this.getMockDailyRecap();
    }

    try {
      console.log('ü§ñ Generating real-time daily market recap...');
      
      const prompt = `Analyse le march√© forex d'aujourd'hui (${new Date().toLocaleDateString('fr-FR')}). 
      
      Fournis une analyse compl√®te incluant:
      1. R√©sum√© ex√©cutif des mouvements de devises majeures
      2. 3 points cl√©s du jour avec leur impact (positif/n√©gatif)
      3. Sentiment global du march√©
      4. Recommandations pour les traders
      
      Focus sur: EUR/USD, GBP/USD, USD/JPY, USD/CHF, AUD/USD, USD/CAD
      
      R√©ponds en JSON avec cette structure:
      {
        "summary": "r√©sum√© ex√©cutif",
        "keyPoints": [
          {"title": "titre", "impact": "positif/n√©gatif", "description": "description"},
          {"title": "titre", "impact": "positif/n√©gatif", "description": "description"},
          {"title": "titre", "impact": "positif/n√©gatif", "description": "description"}
        ],
        "sentiment": "sentiment global",
        "confidence": nombre_entre_0_100,
        "mainTrend": "tendance principale",
        "recommendation": "recommandation principale"
      }`;
      
      const aiResponse = await this.callPerplexityAI(prompt);
      console.log('‚úÖ Daily recap generated by AI');
      
      // Try to parse JSON response
      try {
        const parsed = JSON.parse(aiResponse);
        return {
          date: new Date().toLocaleDateString('fr-FR'),
          summary: parsed.summary,
          keyPoints: parsed.keyPoints,
          aiInsights: {
            sentiment: parsed.sentiment,
            confidence: parsed.confidence,
            mainTrend: parsed.mainTrend,
            recommendation: parsed.recommendation
          },
          timestamp: new Date().toISOString(),
          source: 'Perplexity AI'
        };
      } catch (parseError) {
        console.log('‚ö†Ô∏è Could not parse JSON, using raw response');
        return {
          date: new Date().toLocaleDateString('fr-FR'),
          summary: aiResponse,
          keyPoints: this.getMockDailyRecap().keyPoints,
          aiInsights: {
            sentiment: "Analyse g√©n√©r√©e par IA",
            confidence: 85,
            mainTrend: "Bas√© sur analyse Perplexity AI",
            recommendation: "Voir analyse compl√®te ci-dessus"
          },
          timestamp: new Date().toISOString(),
          source: 'Perplexity AI'
        };
      }
      
    } catch (error) {
      console.error('‚ùå Error generating daily recap:', error);
      const mockData = this.getMockDailyRecap();
      mockData.summary = "Erreur lors de la g√©n√©ration de l'analyse IA. Donn√©es de d√©monstration affich√©es.";
      return mockData;
    }
  }

  // Generate Currency Analysis using AI + Economic Data
  async generateCurrencyAnalysis(currency) {
    if (!this.isReady()) {
      console.log('‚ö†Ô∏è Perplexity API not ready, using mock data for', currency);
      return this.getMockCurrencyAnalysis(currency);
    }

    try {
      console.log(`ü§ñ Generating real-time analysis for ${currency}...`);
      
      const prompt = `Analyse fondamentale compl√®te de la devise ${currency} aujourd'hui.
      
      Fournis une analyse d√©taill√©e incluant:
      1. Score fondamental (0-100)
      2. Score technique (0-100) 
      3. Sentiment actuel du march√©
      4. Facteurs cl√©s influen√ßant la devise (4 points maximum)
      5. Pr√©vision et recommandation (ACHAT/VENTE/NEUTRE)
      6. Niveau de confiance (0-100)
      
      R√©ponds en JSON avec cette structure exacte:
      {
        "fundamentalScore": nombre_0_100,
        "technicalScore": nombre_0_100,
        "sentiment": "sentiment_description",
        "keyFactors": ["facteur1", "facteur2", "facteur3", "facteur4"],
        "forecast": "pr√©vision_d√©taill√©e",
        "aiRating": "ACHAT/VENTE/NEUTRE",
        "confidence": nombre_0_100
      }`;
      
      const aiResponse = await this.callPerplexityAI(prompt);
      console.log(`‚úÖ Currency analysis generated for ${currency}`);
      
      try {
        const parsed = JSON.parse(aiResponse);
        return {
          ...parsed,
          timestamp: new Date().toISOString(),
          source: 'Perplexity AI'
        };
      } catch (parseError) {
        console.log('‚ö†Ô∏è Could not parse JSON for currency analysis');
        const mockData = this.getMockCurrencyAnalysis(currency);
        mockData.forecast = aiResponse;
        mockData.source = 'Perplexity AI';
        return mockData;
      }
      
    } catch (error) {
      console.error(`‚ùå Error analyzing ${currency}:`, error);
      const mockData = this.getMockCurrencyAnalysis(currency);
      mockData.forecast = "Erreur lors de l'analyse IA. Donn√©es de d√©monstration affich√©es.";
      return mockData;
    }
  }

  // Deep Research using Perplexity AI
  async conductDeepResearch(topic) {
    if (!this.isReady()) {
      return this.getMockResearchData(topic);
    }

    try {
      const prompt = API_CONFIG.PROMPTS.DEEP_RESEARCH(topic);
      const research = await this.callPerplexityAI(prompt);
      return this.formatResearchResults(research);
    } catch (error) {
      console.error('Error conducting deep research:', error);
      return this.getMockResearchData(topic);
    }
  }

  // Private Methods

  async callPerplexityAI(prompt) {
    console.log('ü§ñ Calling Perplexity AI with prompt:', prompt.substring(0, 100) + '...');
    
    try {
      const response = await fetch('https://api.perplexity.ai/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.perplexityApiKey}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          model: 'llama-3.1-sonar-small-128k-online',
          messages: [
            {
              role: 'system',
              content: 'Tu es un analyste forex professionnel expert en analyse fondamentale. Fournis des analyses pr√©cises et actionnables en fran√ßais pour les traders forex. Sois concis mais complet.'
            },
            {
              role: 'user', 
              content: prompt
            }
          ],
          max_tokens: 1500,
          temperature: 0.2,
          top_p: 0.9,
          stream: false
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Perplexity API Error:', response.status, errorText);
        throw new Error(`Perplexity API error: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      console.log('‚úÖ Perplexity AI Response received');
      return data.choices[0].message.content;
      
    } catch (error) {
      console.error('‚ùå Error calling Perplexity AI:', error);
      throw error;
    }
  }

  async getFredData(indicator, startDate = null, endDate = null) {
    const url = new URL(API_CONFIG.FRED.BASE_URL + API_CONFIG.FRED.ENDPOINTS.SERIES);
    url.searchParams.append('series_id', indicator);
    url.searchParams.append('api_key', this.fredApiKey);
    url.searchParams.append('file_type', 'json');
    
    if (startDate) url.searchParams.append('observation_start', startDate);
    if (endDate) url.searchParams.append('observation_end', endDate);

    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`FRED API error: ${response.status}`);
    }

    return await response.json();
  }

  async getLatestEconomicData() {
    const indicators = [
      'FEDFUNDS', 'CPIAUCSL', 'UNRATE', // US data
      'ECBREFI', 'EA19CPHAINMEI', // EU data
      'JPNINTDSGDPM193N', 'GBRCPIALLMINMEI' // Japan, UK data
    ];

    const data = {};
    for (const indicator of indicators) {
      try {
        data[indicator] = await this.getFredData(indicator);
      } catch (error) {
        console.error(`Error fetching ${indicator}:`, error);
      }
    }

    return data;
  }

  async getCurrencyIndicators(currency) {
    const indicatorMap = {
      'USD': ['FEDFUNDS', 'CPIAUCSL', 'UNRATE', 'GDP'],
      'EUR': ['ECBREFI', 'EA19CPHAINMEI'],
      'GBP': ['INTDSRUKM193N', 'GBRCPIALLMINMEI'],
      'JPY': ['JPNINTDSGDPM193N', 'JPNCPIALLMINMEI'],
      'CAD': ['INTDSRCAM193N', 'CANCPIALLMINMEI'],
      'AUD': ['INTDSRAUQ193N', 'AUSCPIALLQINMEI'],
      'CHF': ['INTDSRCHM193N'] // Swiss indicators
    };

    const indicators = indicatorMap[currency] || [];
    const data = {};

    for (const indicator of indicators) {
      try {
        data[indicator] = await this.getFredData(indicator);
      } catch (error) {
        console.error(`Error fetching ${indicator} for ${currency}:`, error);
      }
    }

    return data;
  }

  buildDailyRecapPrompt(economicData) {
    return `${API_CONFIG.PROMPTS.DAILY_RECAP}
    
Donn√©es √©conomiques r√©centes:
${JSON.stringify(economicData, null, 2)}

Analyse ces donn√©es et fournis un r√©capitulatif quotidien complet du march√© forex.`;
  }

  buildCurrencyAnalysisPrompt(currency, indicators) {
    return `${API_CONFIG.PROMPTS.CURRENCY_ANALYSIS(currency)}
    
Indicateurs √©conomiques pour ${currency}:
${JSON.stringify(indicators, null, 2)}

Fournis une analyse fondamentale compl√®te de cette devise.`;
  }

  // Mock Data Methods (used when APIs not available)
  getMockDailyRecap() {
    return {
      date: new Date().toLocaleDateString('fr-FR'),
      summary: "Les march√©s forex montrent une volatilit√© accrue suite aux derni√®res d√©clarations de la BCE concernant l'inflation dans la zone euro. L'EUR/USD maintient une tendance haussi√®re mod√©r√©e.",
      keyPoints: [
        {
          title: "BCE maintient ses taux directeurs",
          impact: "positif",
          description: "La Banque Centrale Europ√©enne a maintenu ses taux d'int√©r√™t √† 4.25%, conform√©ment aux attentes du march√©."
        },
        {
          title: "Dollar am√©ricain sous pression",
          impact: "n√©gatif",
          description: "Le DXY recule de 0.3% face aux incertitudes sur la politique mon√©taire de la Fed."
        },
        {
          title: "Livre sterling en hausse",
          impact: "positif",
          description: "GBP/USD gagne 0.45% gr√¢ce aux donn√©es d'inflation britanniques favorables."
        }
      ],
      aiInsights: {
        sentiment: "Optimiste mod√©r√©",
        confidence: 78,
        mainTrend: "Affaiblissement du Dollar US face aux devises europ√©ennes",
        recommendation: "Surveiller les annonces Fed de mercredi pour confirmation de tendance"
      }
    };
  }

  getMockCurrencyAnalysis(currency) {
    const mockData = {
      EUR: {
        fundamentalScore: 78,
        technicalScore: 65,
        sentiment: "Haussier mod√©r√©",
        aiRating: "ACHAT",
        confidence: 76,
        forecast: "L'Euro devrait maintenir sa trajectoire haussi√®re face au Dollar US, soutenu par une politique mon√©taire BCE √©quilibr√©e et des fondamentaux √©conomiques solides."
      },
      USD: {
        fundamentalScore: 72,
        technicalScore: 58,
        sentiment: "Baissier l√©ger",
        aiRating: "NEUTRE",
        confidence: 68,
        forecast: "Le Dollar US fait face √† des vents contraires √† court terme, mais reste soutenu par des fondamentaux √©conomiques solides √† long terme."
      },
      GBP: {
        fundamentalScore: 71,
        technicalScore: 73,
        sentiment: "Haussier",
        aiRating: "ACHAT",
        confidence: 73,
        forecast: "La Livre Sterling b√©n√©ficie d'une politique mon√©taire ferme de la BoE et d'une am√©lioration des relations commerciales post-Brexit."
      }
    };

    return mockData[currency] || mockData.USD;
  }

  getMockResearchData(topic) {
    return {
      topic,
      summary: `Recherche approfondie sur ${topic} et son impact sur les march√©s forex.`,
      keyFindings: [
        "Impact historique significatif sur la volatilit√© des devises",
        "Corr√©lations fortes avec les politiques des banques centrales",
        "Implications pour les strat√©gies de trading √† moyen terme"
      ],
      tradingRecommendations: [
        "Surveiller les niveaux de support/r√©sistance cl√©s",
        "Utiliser une gestion de risque stricte",
        "Consid√©rer les hedges sur positions longues"
      ],
      confidence: 82
    };
  }

  formatDailyRecap(aiAnalysis, economicData) {
    // Format AI analysis into structured daily recap
    return {
      date: new Date().toLocaleDateString('fr-FR'),
      summary: aiAnalysis,
      economicData: economicData,
      timestamp: new Date().toISOString()
    };
  }

  formatCurrencyAnalysis(currency, aiAnalysis, indicators) {
    // Format AI analysis into structured currency analysis
    return {
      currency,
      analysis: aiAnalysis,
      indicators: indicators,
      timestamp: new Date().toISOString()
    };
  }

  formatResearchResults(research) {
    // Format research results
    return {
      research,
      timestamp: new Date().toISOString()
    };
  }
}

// Create singleton instance
const forexAIService = new ForexAIService();

export default forexAIService;